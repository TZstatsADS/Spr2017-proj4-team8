height=300) %>%
layout(title = '2011 US Agriculture Exports by State', geo = g)
g <- list(scope = 'usa', projection = list(type = 'aitoff'), showlakes = TRUE)
plot_ly(df,  type = 'choropleth', z = ~total.exports, text = ~hover,
locations = ~code, locationmode = ~'USA-states', # map state code to state location
color = ~total.exports, colorbar = ~list(title = "Millions USD"),
marker = ~list(line = l),
# filename="r-docs/usa-choropleth",
height=300) %>%
layout(title = '2011 US Agriculture Exports by State', geo = g)
g <- list(scope = 'usa', projection = list(type = 'albers usa'), showlakes = TRUE)
plot_ly(df,  type = 'choropleth', z = ~total.exports, text = ~hover,
locations = ~code, locationmode = ~'USA-states', # map state code to state location
color = ~total.exports, colorbar = ~list(title = "Millions USD"),
marker = ~list(line = l),
# filename="r-docs/usa-choropleth",
height=300) %>%
layout(title = '2011 US Agriculture Exports by State', geo = g)
g <- list(scope = 'usa', projection = list(type = 'natural earth'), showlakes = TRUE)
plot_ly(df,  type = 'choropleth', z = ~total.exports, text = ~hover,
locations = ~code, locationmode = ~'USA-states', # map state code to state location
color = ~total.exports, colorbar = ~list(title = "Millions USD"),
marker = ~list(line = l),
# filename="r-docs/usa-choropleth",
height=300) %>%
layout(title = '2011 US Agriculture Exports by State', geo = g)
library(ggplot2)
ggplot(data = diamonds, aes(x = price),height=500,width=800) +
geom_histogram() +
scale_x_log10()
install.packages("ggvis")
library("devtools")
library(ggvis)
install.packages("rCharts")
library("devtools")
install_github("ramnathv/rCharts")
library(rCharts)
scatter.ggvis <- mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>%
layer_points() %>% set_options(width = img.width, height = img.height)
scatter.ggvis <- mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>%
layer_points()
scatter.ggvis
scatter.rcharts <- rPlot(mpg ~ wt, data = mtcars, color = 'cyl', type = 'point')
scatter.rcharts$show('iframesrc', cdn=TRUE```
```
scatter.rcharts$show
scatter.rcharts
line.ggvis <- mtcars.mean %>% ggvis(x = ~cyl, y = ~mpg_mean, stroke = ~am) %>%
layer_lines() %>% set_options(width = img.width, height = img.height)
line.ggvis <- mtcars %>% ggvis(x = ~cyl, y = ~mpg_mean, stroke = ~am) %>%
layer_lines() %>% set_options(width = img.width, height = img.height)
line.ggvis <- mtcars %>% ggvis(x = ~cyl, y = ~mpg, stroke = ~am) %>%
layer_lines()
line.ggvis
library(ggvis)
library(shiny)
# Basic dynamic example
mtc1 <- reactive({
invalidateLater(2000, NULL);
mtcars[sample(nrow(mtcars), 10), ]
})
mtc1 %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1),
) %>%
set_options(height=300,width=400)%>%
layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1),
) %>%
layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
set_options(height=300,width=400)%>%
layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
set_options(height=300,width=400) %>%
layer_points()
mtcars %>%
ggvis(~wt, ~mpg, size := input_slider(10, 100), opacity := input_slider(0, 1)
) %>%
set_options(height=200,width=500) %>% layer_points()
library(ggvis)
library(nasaweather)
library(dplyr)
nasa %>%
group_by(lat, long) %>%
ggvis(~lat, ~long) %>%
subvis()
install.packages("nasaweather")
library(nasaweather)
nasa %>%
group_by(lat, long) %>%
ggvis(~lat, ~long) %>%
subvis()
library(ggvis)
nasa %>%
group_by(lat, long) %>%
ggvis(~lat, ~long) %>%
subvis()
nasa %>%
group_by(lat, long) %>%
ggvis(~lat, ~long) %>%
layer_rect()
small %>%
ggvis(~long, ~lat) %>%
subvis(width := 100, height := 100, stroke := "red") %>%
layer_points(~month, ~ozone) %>%
add_axis("x", ticks = 3) %>%
add_axis("y", ticks = 3)
library(dplyr)
small %>%
ggvis(~long, ~lat) %>%
subvis(width := 100, height := 100, stroke := "red") %>%
layer_points(~month, ~ozone) %>%
add_axis("x", ticks = 3) %>%
add_axis("y", ticks = 3)
small <- nasaweather::atmos %>%
filter(lat <= -11.217391, long <= -106.287, year == 1995) %>%
group_by(long, lat)
small %>%
ggvis(~long, ~lat) %>%
subvis(width := 100, height := 100, stroke := "red") %>%
layer_points(~month, ~ozone)
?subvis
mtc1 <- reactive({
invalidateLater(2000, NULL);
mtcars[sample(nrow(mtcars), 10), ]
})
mtc1 %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points()
library(ggvis)
library(shiny)
set.seed(430)
dat <- data.frame(time = 1:10, value = runif(10))
ddat <- reactive({
invalidateLater(2000, NULL)
dat$time  <<- c(dat$time[-1], dat$time[length(dat$time)] + 1)
dat$value <<- c(dat$value[-1], runif(1))
dat
})
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
mtcars %>%
ggvis(x = ~wt, y = ~mpg, size.hover := 200,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
layer_points()
library(devtools)
library(rCharts)
scatter.rcharts <- rPlot(mpg ~ wt, data = mtcars, color = 'cyl', type = 'point')
scatter.rcharts
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1$print("chart1")
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")```
m1$print("chart2")
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
data<-read.table("download.csv",sep=",",header=TRUE)
colnames(data)<-c("Year","GDP","Retail")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print('mychart1', include_assets = TRUE, cdn = TRUE)
mtcars %>%
ggvis(x = ~wt, y = ~mpg, fillOpacity.hover := .5,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
set_options(height=200)%>%
layer_points()
library(ggvis)
mtcars %>%
ggvis(x = ~wt, y = ~mpg, fillOpacity.hover := .5,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
set_options(height=200)%>%
layer_points()
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print('mychart1', include_assets = TRUE, cdn = TRUE)
library(ggvis)
mtcars %>%
ggvis(x = ~wt, y = ~mpg, fillOpacity.hover := .5,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
layer_points()%>%
set_options(height=200)
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$set(width = 800, height = 300)
n1$print('mychart1', include_assets = TRUE, cdn = TRUE)
p12 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'multiChart')
ecm <- reshape2::melt(
economics[,c('date', 'uempmed', 'psavert')],
id = 'date'
)
data(economics, package = 'ggplot2')
ecm <- reshape2::melt(
economics[,c('date', 'uempmed', 'psavert')],
id = 'date'
)
p12 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'multiChart')
p12$set(multi = list(
uempmed = list(type="area", yAxis=1),
psavert = list(type="line", yAxis=2)
))
p12$setTemplate(script = system.file(
"/libraries/nvd3/layouts/multiChart.html",
package = "rCharts"
))
p12
p12 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'multiChart')
p12$set(multi = list(
uempmed = list(type="area", yAxis=1),
psavert = list(type="line", yAxis=2)
))
p12
data(economics, package = 'ggplot2')
p6 <- nPlot(uempmed ~ date, data = economics, type = 'lineChart')
p6
a <- Highcharts$new()
a$title(text = "Fruits")
a$data(x = c("Apples","Bananas","Oranges"), y = c(15, 20, 30), type = "pie", name = "Amount")
a$print('mychart4', include_assets = TRUE, cdn = TRUE)
ecm <- reshape2::melt(
economics[,c('date', 'uempmed', 'psavert')],
id = 'date'
)
p7 <- nPlot(value ~ date, group = 'variable',
data = ecm,
type = 'lineWithFocusChart'
)
p7
require(rCharts)
rm(list=ls())
require(rCharts)
data(economics, package = 'ggplot2')
ecm <- reshape2::melt( economics[,c('date', 'uempmed', 'psavert')], id = 'date')
p <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineWithFocusChart')
p$set(height=200)
p
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
h1$print("chart5")
map1b = Leaflet$new()
map1b$setView(c(45.5236, -122.675), zoom = 14)
map1b$tileLayer(provider = 'MapQuestOpen.OSM')
map1b
map1 = Leaflet$new()
map1$setView(c(45.50867, -73.55399), 13)
map1
map1 = Leaflet$new()
map1$setView(c(51.505, -0.09), zoom = 13)
map1
map1 = Leaflet$new()
map1$setView(c(29.6779, -95.4379), 10)
map1
map1$tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png")
map1
map1b$setView(c(45.5236, -122.675), zoom = 14)
map11$setView(c(45.5236, -122.675), zoom = 14)
map11$setView(c(45.5236, -122.675), zoom = 14)
map1$setView(c(45.5236, -122.675), zoom = 14)
map1
map1 = Leaflet$new()
map1$setView(c(45.5236, -122.675), zoom = 14)
map1
map1$setView(c(40.7128, -74.0059), zoom = 14)
map1
map1$setView(c(41.7128, -74.0059), zoom = 14)
map1
map1$setView(c(41.7128, -74.0059), zoom = 10)
map1
map1$setView(c(40.7128, -74.0059), zoom = 10)
map1
map1$circle(c(40.7128, -74.0059))
map1
map1 = Leaflet$new()
map1$setView(c(45.5236, -122.675), 13)
map1$tileLayer("http://a.tiles.mapbox.com/v3/mapbox.control-room/{z}/{x}/{y}.png", zoom = 8)
map1
map1 = Leaflet$new()
map1 = Leaflet$new()
map1$setView(c(40.7128, -74.0059), zoom = 10)
map1$circle(c(40.7128, -74.0059))
mtcars %>%
ggvis(x = ~wt, y = ~mpg, fillOpacity.hover := .5,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
layer_points()%>%
set_options(height=200)
h1 <- Highcharts$new()
h1$chart(type = "spline")
h1$series(data = c(1, 3, 2, 4, 5, 4, 6, 2, 3, 5, 4, 7), dashStyle = "longdash", name='2011')
h1$series(data = c(NA, 4, 1, 3, 4, 2, 9, 1, 2, 3, 4, 3), dashStyle = "shortdot", name='2012')
h1$series(data = c(4, 6, 7, 8, 6, 2, 9, 4, 3, 6, 7, NA), dashStyle = "longdot", name='2013')
h1$xAxis(categories = 1:12)
h1$legend(symbolWidth = 80)
h1$print('mychart2', include_assets = TRUE, cdn = TRUE)
mtcars %>%
ggvis(x = ~wt, y = ~mpg, fillOpacity.hover := .5,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
layer_points()%>%
set_options(height=200)
mtcars %>%
ggvis(x = ~wt, y = ~mpg, fillOpacity.hover := .5,
stroke := NA, stroke.hover := "red", strokeWidth := 3) %>%
# := operator means to use a raw, unscaled value.
layer_points()
library(ggvis)
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library(plotly)
```{r global_options, include=FALSE}
library(plotly)
library(ggplot2)
require(devtools)
install_github('rCharts', 'ramnathv')
set.seed(5)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(plotly)
library(ggplot2)
require(devtools)
install_github('rCharts', 'ramnathv')
set.seed(5)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(ggvis)
library(shiny)
set.seed(430)
dat <- data.frame(time = 1:10, value = runif(10))
ddat <- reactive({
invalidateLater(2000, NULL)
dat$time  <<- c(dat$time[-1], dat$time[length(dat$time)] + 1)
dat$value <<- c(dat$value[-1], runif(1))
dat
})
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
library(ggvis)
library(shiny)
set.seed(430)
dat <- data.frame(time = 1:10, value = runif(10))
ddat <- reactive({
invalidateLater(2000, NULL)
dat$time  <<- c(dat$time[-1], dat$time[length(dat$time)] + 1)
dat$value <<- c(dat$value[-1], runif(1))
dat
})
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
library(ggvis)
library(shiny)
# Data points moving from right to left
set.seed(430)
dat <- data.frame(time = 1:10, value = runif(10))
ddat <- reactive({
invalidateLater(2000, NULL)
dat$time  <<- c(dat$time[-1], dat$time[length(dat$time)] + 1)
dat$value <<- c(dat$value[-1], runif(1))
dat
})
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
rm(list=ls())
library(ggvis)
library(shiny)
# Data points moving from right to left
set.seed(430)
dat <- data.frame(time = 1:10, value = runif(10))
ddat <- reactive({
invalidateLater(2000, NULL)
dat$time  <<- c(dat$time[-1], dat$time[length(dat$time)] + 1)
dat$value <<- c(dat$value[-1], runif(1))
dat
})
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
library("WGCNA")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
library("WGCNA")
theta_combined$name<-  sub("(.*?)_.*", "\\1", theta_combined$docnames)
name.list <- unique(theta_combined$name)
for (i in name.list){
print(i)
Theta <- filter(theta_combined, name== i)
#Theta<- as.matrix(as.data.frame(theta_combined[[3]][2]))
Theta<- as.matrix(as.data.frame(theta_combined[,
c(-ncol(theta_combined),-ncol(theta_combined)+1)]))
ledistance<-dist(Theta, method = "euclid")
cluster <- hclust(distance, method = "complete")
cut <- cutree(cluster, h=0.15)
plotDendroAndColors(cluster, cut)
}
data.lib="../data/nameset"
data.files=list.files(path=data.lib, "*.txt")
data.files
query.list=substring(data.files,
1, nchar(data.files)-4)
query.list
query.list
f.line.proc=function(lin, nam.query="."){
# remove unwanted characters
char_notallowed <- "\\@#$%^&?" # characters to be removed
lin.str=str_replace(lin, char_notallowed, "")
# get author id
lin.str=strsplit(lin.str, "_")[[1]]
author_id=as.numeric(lin.str[1])
# get paper id
lin.str=lin.str[2]
paper_id=strsplit(lin.str, " ")[[1]][1]
lin.str=substring(lin.str, nchar(paper_id)+1, nchar(lin.str))
paper_id=as.numeric(paper_id)
# get coauthor list
lin.str=strsplit(lin.str, "<>")[[1]]
coauthor_list=strsplit(lin.str[1], ";")[[1]]
#print(lin.str)
for(j in 1:length(coauthor_list)){
if(nchar(coauthor_list[j])>0){
nam = strsplit(coauthor_list[j], " ")[[1]]
if(nchar(nam[1])>0){
first.ini=substring(nam[1], 1, 1)
}else{
first.ini=substring(nam[2], 1, 1)
}
}
last.name=nam[length(nam)]
nam.str = paste0(first.ini, last.name)
coauthor_list[j]=nam.str
}
match_ind = charmatch(nam.query, coauthor_list, nomatch=-1)
#print(nam.query)
#print(coauthor_list)
#print(match_ind)
if(match_ind>0){
coauthor_list=coauthor_list[-match_ind]
}
coauthor_list = paste(coauthor_list, collapse = " ")
paper_title=lin.str[2]
journal_name=lin.str[3]
list(author_id = author_id,
unique_paper_id = paste(nam.query, author_id, paper_id, sep = "_"),
unique_author_id = paste(nam.query, author_id, sep = "_"),
paper_id = paper_id,
coauthor_list = coauthor_list,
paper_title = paper_title,
journal_name = journal_name,
combined = paste(coauthor_list, paper_title, journal_name)
)
}
name.list <- unique(theta_combined$name)
getwd()
setwd("/Users/yuejin/Dropbox/Courseworks/ADS/proj4/Spr2017-proj4-team8/lib")
load("../output/theta_combined.RData")
theta_combined$name<-  sub("(.*?)_.*", "\\1", theta_combined$docnames)
name.list <- unique(theta_combined$name)
for (i in name.list){
print(i)
Theta <- filter(theta_combined, name== i)
#Theta<- as.matrix(as.data.frame(theta_combined[[3]][2]))
Theta<- as.matrix(as.data.frame(theta_combined[,
c(-ncol(theta_combined),-ncol(theta_combined)+1)]))
ledistance<-dist(Theta, method = "euclid")
cluster <- hclust(distance, method = "complete")
cut <- cutree(cluster, h=0.15)
plotDendroAndColors(cluster, cut)
}
print(i)
Theta <- filter(theta_combined, name== i)
name.list
theta_combined$name<-  sub("(.*?)_.*", "\\1", theta_combined$docnames)
name.list <- unique(theta_combined$name)
name.list
theta_combined
unique(theta_combined$docnames)
length(theta_combined$docnames)
source('~/Dropbox/Project4_WhoIsWho/lib/evaluation_measures.R')
source('../lib/evaluation_measures.R')
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
Theta <- filter(theta_combined, name== i)
print(i)
Theta <- filter(theta_combined, name== i)
