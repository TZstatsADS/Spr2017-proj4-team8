play_info<-read.table("info.csv",header=T,sep=",")
colnames(play_info)
colnames(play_store)
head(play_info)
View(head(play_info))
View(play_store)
merged <-merge(play_store,play_info,by=c("Store","Date"))
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
plot(Weekly_Sales~Temperature, data=new_data,main="Weekly sales at different temperatures")
colnames(play_info)
colnames(play_store)
z <- matrix(c(1:3, "R", "Open", "Lab", pi, sqrt(4),2^3), nrow = 3)
colnames(z) <- c("First", "Second", "Third")
z[, 1] != 1
z[(z[, 1] != 1), 3]
z[1:2,]
play_info[play_info$Store==1,]
is.na(c(3,-7.5, NA, pi))
is.na(3/0)
3/0
is.infinite(3/0)
a<-matrix(c(1:4),nrow=2)
a[2,2]<-NA
is.na(a)
b<-c(1:9,NA)
mean(b)
mean(b,na.rm=TRUE)
colSums(a,na.rm=TRUE)
?na.omit #see the difference between different ways of handling NA
?na.omit #see the difference between different ways of handling NA
?na.omit #see the difference between different ways of handling NA
df <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
df
na.omit(df)
rbind(play_store, play_info)
a<-rbind(play_store, merged)
dim(new_data)
dim(merged)
dim(play_store)
m <- cbind(1, 1:7)
m
n <- rbind(1, 1:7)
n
library(dplyr)
left_join(play_store, play_info, by = c("Store","Date"))
merged2<-left_join(play_store, play_info, by = c("Store","Date"))
dim(merged2)
new_data2 <- merged2[,c("Store","Date","Weekly_Sales","Temperature")]
identical(new_data2,new_data)
new_data2
new_data
View(new_data)
View(new_data2)
merged <-merge(play_store,play_info,by=c("Store","Date"))
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
merged2<-left_join(play_store, play_info, by = c("Store","Date"))
dim(merged2)
new_data2 <- merged2[,c("Store","Date","Weekly_Sales","Temperature")]
identical(new_data2,new_data)
View(new_data2)
View(new_data)
merged2<-inner_join(play_store, play_info, by = c("Store","Date"))
colnames(play_info)
colnames(play_store)
merged <-merge(play_store,play_info,by=c("Store"="Store","Date"="Date"))
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
merged <-merge(play_store,play_info,by=c("Store","Date"))
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
plot(Weekly_Sales~Temperature, data=new_data,main="Weekly sales at different temperatures")
merged2<-inner_join(play_store, play_info, by = c("Store"="Store","Date"="Date"))
merged2<-left_join(play_store, play_info, by = c("Store"="Store","Date"="Date"))
levels(play_store$Store)
levels(play_store$Date)
merged2<-left_join(play_store, play_info, by = c("Store"="Store","Date"="Date"))
dim(merged2)
new_data2 <- merged2[,c("Store","Date","Weekly_Sales","Temperature")]
identical(new_data2,new_data)
merged <-merge(play_store,play_info,by=c("Store","Date"))
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
View(new_data)
View(new_data)
View(new_data2)
View(play_store)
View(play_info)
plot(Weekly_Sales~Temperature, data=new_data2,main="Weekly sales at different temperatures")
identical(new_data2,new_data)
View(play_info)
df <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
df
na.omit(df)
na.rm(df)
?na.omit #see the difference between different ways of handling NA
na.pass(df)
na.exclude(df)
na.fail(df)
View(new_data2)
n
## Merge Datasets
play_store<-read.table("store.csv",header=T,sep=",")
play_info<-read.table("info.csv",header=T,sep=",")
colnames(play_info)
colnames(play_store)
View(play_store)
View(head(play_info))
# The rows in the two data frames that match on the specified columns are extracted, and joined together.
merged <-merge(play_store,play_info,by=c("Store","Date"))
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
plot(Weekly_Sales~Temperature, data=new_data,main="Weekly sales at different temperatures")
# Using dplyr
library(dplyr)
merged2<-left_join(play_store, play_info, by = c("Store"="Store","Date"="Date"))
dim(merged2)
new_data2 <- merged2[,c("Store","Date","Weekly_Sales","Temperature")]
View(new_data2)
good_times<-new_data2[new_data2>20000,]
View(good_times)
names(new_data2)
good_times<-new_data2[new_data2$Weekdly_Sales>20000,]
good_times
good_times<-new_data2[new_data2$Weekly_Sales>20000,]
good_times
plot(good)
good<-new_data2[new_data2$Weekly_Sales>20000,]
plot(good[,3:4])
plot(good[,4],good[,3])
plot(good[,4],good[,3],ytab="Sales",xtab="Temp")
plot(good[,4],good[,3],ylab="Sales",xlab="Temp")
warnings()
plot(good[,4],good[,3],ylab="Sales",xlab="Temp")
play_info[play_info$Store==1,]
store1<-play_info[play_info$Store==1,]
names(store1)
plot(store1$Temperature,store1$Weekly_Sales)
range(store1$Temperature)
plot(store1$Temperature,store1$Weekly_Sales)
play_store<-read.table("store.csv",header=T,sep=",")
rm(list=ls())
m <- cbind(1, 1:7)
m
n <- rbind(1, 1:7)
n
m <- cbind(1:3, 1:7)
m
m <- cbind(2:8, 1:7)
m
play_store<-read.table("store.csv",header=T,sep=",")
play_info<-read.table("info.csv",header=T,sep=",")
colnames(play_info)
colnames(play_store)
View(play_store)
View(head(play_info))
View(play_info)
merged <-merge(play_store,play_info,by=c("Store","Date"))
dim(merged)
new_data <- merged[,c("Store","Date","Weekly_Sales","Temperature")]
plot(Weekly_Sales~Temperature, data=new_data,main="Weekly sales at different temperatures")
library(dplyr)
merged2<-left_join(play_store, play_info, by = c("Store"="Store","Date"="Date"))
dim(merged2)
new_data2 <- merged2[,c("Store","Date","Weekly_Sales","Temperature")]
identical(new_data2,new_data)
View(new_data)
View(new_data2)
View(play_store)
new_data2$Weekly_Sales>20000
good<-new_data2[new_data2$Weekly_Sales>20000,]
good
plot(good[,4],good[,3],ylab="Sales",xlab="Temp")
store1<-play_info[play_info$Store==1,]
View(store1)
v<-NULL
is.na(3/0)
3/0
is.infinite(3/0)
is.na(c(3,-7.5, NA, pi))
is.na(c(3,-7.5, NA, pi))
b<-c(1:9,NA)
b
mean(b)
mean(b,na.rm=TRUE)
sum(b)
sum(b,na.rm)
sum(b,na.rm=T)
?na.omit #see the difference between different ways of handling NA
mean(na.omit(b))
mean(na.pass(b))
mean(na.exclude(b))
mean(na.fail(b))
df <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
df
na.omit(df)
require(rCharts)
install.packages("rCharts")
require(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print('mychart1', include_assets = TRUE, cdn = TRUE)
require(rCharts)
h1 <- Highcharts$new()
h1$chart(type = "spline")
h1$series(data = c(1, 3, 2, 4, 5, 4, 6, 2, 3, 5, 4, 7), dashStyle = "longdash", name='2011')
h1$series(data = c(NA, 4, 1, 3, 4, 2, 9, 1, 2, 3, 4, 3), dashStyle = "shortdot", name='2012')
h1$series(data = c(4, 6, 7, 8, 6, 2, 9, 4, 3, 6, 7, NA), dashStyle = "longdot", name='2013')
h1$xAxis(categories = 1:12)
h1$legend(symbolWidth = 80)
h1$print('mychart2', include_assets = TRUE, cdn = TRUE)
require(googleVis)
install.packages("googleVis")
require(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=800, height=410))
print(M, tag='chart')
require(googleVis)
demo(googleVis)
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Intensity <- gvisIntensityMap(df)
print(M, tag='chart')
rmarkdown::shiny_prerendered_clean('~/Dropbox/data_vis.Rpres')
d <- diamonds[sample(nrow(diamonds), 1000), ]
d <- diamonds[sample(nrow(diamonds), 1000), ]
d <- carat[sample(nrow(diamonds), 1000), ]
stats
diamonds
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
install.packages("ggvis")
library(ggvis)
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
data(carat)
data(caret)
data(diamonds)
data(diamond)
library(ggplot2)
data(diamonds)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
diamonds<-d
d<-diamonds
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(plotly)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
d
names(d)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
plot_ly(diamonds, x = carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
plot_ly()
plot_ly
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
plot_ly(d, x = ~carat, y = ~price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
plot_ly(d, x = ~carat, y = ~price, text = paste("Clarity: ", ~clarity), mode = "markers", color = ~carat, size = ~carat)
d$clarity
dim(d)
d <- diamonds[sample(nrow(diamonds), 1000), ]
dim(d)
names(d)
plot_ly(d, x = ~carat, y = ~price, text = paste("Clarity: ", ~clarity), mode = "markers", color = ~carat, size = ~carat)
dim(d$clarity)
length(d$clarity)
i <-iris[sample(nrow(iris),1000),]
i <-iris[sample(nrow(iris),200),]
dim(iris)
i <-iris[sample(nrow(iris),50),]
plot_ly(i, x = ~Sepal.Width, y = ~Sepal.Length)
dim(diamonds)
plot_ly(d, x = ~carat, y = ~price, mode = "markers", color = ~carat, size = ~carat)
plot_ly(d, x = ~carat, y = ~price, text = ~clarity, mode = "markers", color = ~carat, size = ~carat)
plot_ly(d, x = ~carat, y = ~price, text = paste("Clarity:",~clarity), mode = "markers", color = ~carat, size = ~carat)
length(paste("Clarity:",d$clarity))
plot_ly(d, x = ~carat, y = ~price, text = paste("Clarity:",d$clarity), mode = "markers", color = ~carat, size = ~carat)
plot_ly(d, x = ~carat, y = ~price, text = paste("Clarity:",clarity), mode = "markers", color = ~carat, size = ~carat)
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
dat <- map_data("world", "canada") %>% group_by(group)
p <- plot_mapbox(dat, x = ~long, y = ~lat) %>%
add_paths(size = I(2)) %>%
add_segments(x = -100, xend = -50, y = 50, 75) %>%
layout(mapbox = list(zoom = 0,
center = list(lat = ~median(lat),
lon = ~median(long))
))
https://www.mapbox.com/help/create-api-access-token/
install.packages("quantmod")
load("/Users/yuejin/Dropbox/Courseworks/ADS/proj4/Spr2017-proj4-team8/output/phi_combined.RData")
load("/Users/yuejin/Dropbox/Courseworks/ADS/proj4/Spr2017-proj4-team8/output/theta_combined.RData")
load("../output/cleanedPapers.RData")
data.lib="../data/nameset"
data.files=list.files(path=data.lib, "*.txt")
query.list=substring(data.files,
1, nchar(data.files)-4)
query.list
query.list
load("../output/cleanedPapers.RData")
setwd("/Users/yuejin/Dropbox/Courseworks/ADS/proj4/Spr2017-proj4-team8/out")
setwd("/Users/yuejin/Dropbox/Courseworks/ADS/proj4/Spr2017-proj4-team8/output")
load("../output/cleanedPapers.RData")
data.lib="../data/nameset"
data.files=list.files(path=data.lib, "*.txt")
query.list=substring(data.files,
1, nchar(data.files)-4)
query.list
library("topicmodels")
load("../output/dtm_list.RData")
ldaOut_combined <-
LDA(dtm_combined, k, method="Gibbs", control=list(nstart=nstart,
seed = seed,
best=best,
burnin = burnin,
alpha=alpha,
delta=delta,
iter=iter,
thin=thin))
load("../output/dtm_list_combined.RData")
dtm_combined<-dtm_list_combined
rowTotals <- apply(dtm_combined , 1, sum)
dtm_combined  <- dtm_combined[rowTotals> 0, ]
ldaOut_combined <-
LDA(dtm_combined, k, method="Gibbs", control=list(nstart=nstart,
seed = seed,
best=best,
burnin = burnin,
alpha=alpha,
delta=delta,
iter=iter,
thin=thin))
# LDA parameters
burnin <- 4000
iter <- 1000
thin <- 200
seed <-list(2003,2,68,100001,765)
nstart <- 5
best <- TRUE
delta=0.1
alpha<-50/k
# number of topics
k <- 10
# run lda on each name
dtm_combined  <- dtm_combined[rowTotals> 0, ]
ldaOut_combined <-
LDA(dtm_combined, k, method="Gibbs", control=list(nstart=nstart,
seed = seed,
best=best,
burnin = burnin,
alpha=alpha,
delta=delta,
iter=iter,
thin=thin))
alpha<-50/k
rowTotals <- apply(dtm_combined , 1, sum)
dtm_combined  <- dtm_combined[rowTotals> 0, ]
ldaOut_combined <-
LDA(dtm_combined, k, method="Gibbs", control=list(nstart=nstart,
seed = seed,
best=best,
burnin = burnin,
alpha=alpha,
delta=delta,
iter=iter,
thin=thin))
theta_combined <- as.data.frame(ldaOut_combined@gamma)
phi_combined <- posterior(ldaOut_combined)$terms
theta_combined
library(stringr)
if (!require("pacman")) install.packages("pacman")
theta_combined
library(stringr)
data.lib="../data/nameset"
data.files=list.files(path=data.lib, "*.txt")
data.files
## remove "*.txt"
query.list=substring(data.files,
1, nchar(data.files)-4)
query.list
data_list = list(1)
dat = list()
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
raw_dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
dat <- c(dat, raw_dat)
}
data_list=lapply(dat, f.line.proc, nam.query=query.list[i])
```{r}
f.line.proc=function(lin, nam.query="."){
# remove unwanted characters
char_notallowed <- "\\@#$%^&?" # characters to be removed
lin.str=str_replace(lin, char_notallowed, "")
# get author id
lin.str=strsplit(lin.str, "_")[[1]]
author_id=as.numeric(lin.str[1])
# get paper id
lin.str=lin.str[2]
paper_id=strsplit(lin.str, " ")[[1]][1]
lin.str=substring(lin.str, nchar(paper_id)+1, nchar(lin.str))
paper_id=as.numeric(paper_id)
# get coauthor list
lin.str=strsplit(lin.str, "<>")[[1]]
coauthor_list=strsplit(lin.str[1], ";")[[1]]
#print(lin.str)
for(j in 1:length(coauthor_list)){
if(nchar(coauthor_list[j])>0){
nam = strsplit(coauthor_list[j], " ")[[1]]
if(nchar(nam[1])>0){
first.ini=substring(nam[1], 1, 1)
}else{
first.ini=substring(nam[2], 1, 1)
}
}
last.name=nam[length(nam)]
nam.str = paste0(first.ini, last.name)
coauthor_list[j]=nam.str
}
match_ind = charmatch(nam.query, coauthor_list, nomatch=-1)
#print(nam.query)
#print(coauthor_list)
#print(match_ind)
if(match_ind>0){
coauthor_list=coauthor_list[-match_ind]
}
coauthor_list = paste(coauthor_list, collapse = " ")
paper_title=lin.str[2]
journal_name=lin.str[3]
list(author_id = author_id,
unique_paper_id = paste(nam.query, author_id, paper_id, sep = "_"),
unique_author_id = paste(nam.query, author_id, sep = "_"),
paper_id = paper_id,
coauthor_list = coauthor_list,
paper_title = paper_title,
journal_name = journal_name,
combined = paste(coauthor_list, paper_title, journal_name)
)
}
data_list = list(1)
dat = list()
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
raw_dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
dat <- c(dat, raw_dat)
}
data_list=lapply(dat, f.line.proc, nam.query=query.list[i])
# tfidf_list_combined <- list()
dtm_list_combined <- list()
a2 <- list()
for (line in 1:length(data_list)) {
a2 <- rbind(a2, data_list[[line]])
}
a2 <- data.frame(a2)
a2 <- sapply(a2, unlist)
a2 <- data.frame(a2)
a2$combined <- as.character(a2$combined)
it_train2 <- itoken(a2$combined,
preprocessor = tolower,
tokenizer = word_tokenizer,
ids = a2$unique_paper_id,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
## generate DTM/tfidf for all 14 files combined as one
data_list = list(1)
dat = list()
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
raw_dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
dat <- c(dat, raw_dat)
}
data_list=lapply(dat, f.line.proc, nam.query=query.list[i])
# tfidf_list_combined <- list()
dtm_list_combined <- list()
a2 <- list()
for (line in 1:length(data_list)) {
a2 <- rbind(a2, data_list[[line]])
}
a2 <- data.frame(a2)
a2 <- sapply(a2, unlist)
a2 <- data.frame(a2)
a2$combined <- as.character(a2$combined)
it_train2 <- itoken(a2$combined,
preprocessor = tolower,
tokenizer = word_tokenizer,
ids = a2$unique_paper_id,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab2 <- create_vocabulary(it_train2, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab2)
dtm_list_combined <- create_dtm(it_train2, vectorizer)
# tfidf <- TfIdf$new()
# tfidf_list_combined <- fit_transform(dtm_list_combined, tfidf)
dtm_list_combined
rownames(dtm_list_combined)
IDs <- rownames(dtm_list_combined)
theta_combined
theta_combined$docnames <- IDs
theta_combined
save(theta_combined,file="../output/theta_combined.RData")
